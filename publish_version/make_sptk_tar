#!/bin/sh

CWD=`pwd`

SPTK_MAJOR=`cut -d '.' -f 2 .current_version`
SPTK_MINOR=`cut -d '.' -f 3 .current_version`
SPTK_VERSION="5.$SPTK_MAJOR.$SPTK_MINOR"

if [ "$1" = "-n" ] || [ "$1" = "--next-version" ] ; then
  cd sptk5 && git pull || exit 1
  git checkout master || git merge $SPTK_VERSION || exit 1
  # Create branch for new version
  if [ "$SPTK_MINOR" = "" ]; then
    SPTK_MINOR=0
  else
    SPTK_MINOR=$(($SPTK_MINOR+1))
  fi
  SPTK_VERSION="5.$SPTK_MAJOR.$SPTK_MINOR"
  git checkout -b $SPTK_VERSION || git push origin $SPTK_VERSION || exit 1
  git push origin $SPTK_VERSION
  git branch --set-upstream-to=origin/$SPTK_VERSION
  cd $CWD
  mv this_version.dat prior_version.dat
  date +"%Y-%m-%d" > this_version.dat
  echo $SPTK_VERSION > .current_version
fi


cd sptk5 && git pull
SPTK_VERSION=$(git status | head -n1 | sed -re 's/^.* branch (.*)$/\1/') #'
cd $CWD

PRIOR_VERSION_DATE=$(cat prior_version.dat)

SPTK_REVISION=""
SPTK_DIR="sptk-$SPTK_VERSION"
CURR_DIR=`pwd`

if [ -d $SPTK_DIR ]; then
  rm -rf $SPTK_DIR
fi

echo "─────────────────────────────────────────"
echo "Updating SPTK $SPTK_VERSION from GIT"
cd sptk5 && git pull
if [ ! $? = 0 ]; then
   echo ERRORS, exiting
   exit 1
fi

echo '<ul>' > $CURR_DIR/change_list.txt
./generate_change_list.sh $PRIOR_VERSION_DATE | sed -re 's|^(.*)$|<li>\1</li>|' >> $CURR_DIR/change_list.txt
echo '</ul>' >> $CURR_DIR/change_list.txt

cd $CURR_DIR
mkdir -p $SPTK_DIR && rsync -a sptk5/* $SPTK_DIR --exclude .git
if [ ! $? = 0 ]; then
   echo ERRORS, exiting
   exit 1
fi

echo "─────────────────────────────────────────"
echo Making zip archive
zip -qr ${SPTK_DIR}${SPTK_REVISION}.zip $SPTK_DIR 2>&1 > /tmp/sptk.zip.log
if [ $? != 0 ]; then
    cat /tmp/sptk.zip.log
    exit 1
fi

   echo "─────────────────────────────────────────"
echo Making tar.xz archive
tar Jcf ${SPTK_DIR}${SPTK_REVISION}.tar.xz $SPTK_DIR
if [ ! $? = 0 ]; then
   echo ERRORS, exiting
   exit 1
fi

#echo Making zip archive
#zip -r ${SPTK_DIR}${SPTK_REVISION}.zip $SPTK_DIR > /dev/null
#if [ ! $? = 0 ]; then
#   echo ERRORS, exiting
#   exit 1
#fi

build_doc="1"
if [ "$build_doc" = "1" ]; then

   cd $SPTK_DIR/code
   echo "─────────────────────────────────────────"
   echo "Creating Doxygen documentation"
   cp sptk-config.h $SPTK_DIR/sptk5/
   cd $SPTK_DIR
   sh generate_docs.sh $SPTK_VERSION
   if [ ! $? = 0 ]; then
      echo ERRORS, exiting
      exit 1
   fi

   #rm $SPTK_DIR/sptk5/sptk-config.h
   cd $CURR_DIR

   if [ -f $SPTK_DIR/docs/sptk5_reference.pdf ]; then
     echo Installing SPTK reference
     mv $SPTK_DIR/docs/sptk5_reference.pdf .. > /dev/null
     if [ ! $? = 0 ]; then
       echo ERRORS, exiting
       exit 1
     fi
   fi
fi
echo
pwd
echo "─────────────────────────────────────────"
echo Installing the distribution archives
mv ${SPTK_DIR}${SPTK_REVISION}.* ..
cd ..
ln -sf ${SPTK_DIR}${SPTK_REVISION}.tar.xz sptk.tar.xz
ln -sf ${SPTK_DIR}${SPTK_REVISION}.zip sptk.zip

cd $CWD
echo "5.$SPTK_MAJOR.$SPTK_MINOR" > .current_version
exit 0
