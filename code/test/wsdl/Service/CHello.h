#ifndef __CHELLO__
#define __CHELLO__

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

/**
 * WSDL complex type class CHello.
 * Generated by wsdl2cxx SPTK utility.
 */
class CHello : public sptk::WSComplexType
{
    mutable sptk::SharedMutex m_mutex; ///< Mutext that protects access to internal data

public:

   // Elements
   sptk::WSString       m_first_name;
   sptk::WSString       m_last_name;

protected:

   /**
    * Clear content and releases allocated memory (internal)
    */
   void _clear() override;

public:

   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional bool, Is element optional flag
    */
   explicit CHello(const char* elementName="hello", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional),
     m_first_name("first_name"),
     m_last_name("last_name")
   {}

   /**
    * Copy constructor
    * @param other              Other element to copy from
    */
   CHello(const CHello& other) noexcept
   : sptk::WSComplexType(other),
     m_first_name(other.m_first_name),
     m_last_name(other.m_last_name)
   {
   }

   /**
    * Move constructor
    * @param other              Other element to move from
    */
   CHello(CHello&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_first_name(std::move(other.m_first_name)),
     m_last_name(std::move(other.m_last_name))
   {
       other.clear();
   }

   /**
    * Destructor
    */
   ~CHello() override;

   /**
    * Copy assignment
    * @param other              Other element to copy from
    */
   CHello& operator = (const CHello& other)
   {
       if (&other == this)
           return *this;
       copyFrom(other);
       return *this;
   }

   /**
    * Move assignment
    * @param other              Other element to move from
    */
   CHello& operator = (CHello&& other) noexcept
   {
       if (&other == this)
           return *this;
       copyFrom(other);
       other.clear();
       return *this;
   }

   /**
    * Load CHello from XML node
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              XML node containing CHello data
    */
   void load(const sptk::xml::Element* input) override;

   /**
    * Load CHello from JSON element
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              JSON element containing CHello data
    */
   void load(const sptk::json::Element* input) override;

   /**
    * Load CHello from FieldList
    *
    * Only simple WSDL type members are loaded.
    * @param input              Query field list containing CHello data
    */
   void load(const sptk::FieldList& input) override;

   /**
    * Unload CHello to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Element* output) const override;

   /**
    * Unload CHello to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload CHello to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;
};

#endif
