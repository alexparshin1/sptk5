#pragma once

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CHelloResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CHelloResponse : public sptk::WSComplexType
{
public:

   // Elements
   sptk::WSDate                   m_date_of_birth {"date_of_birth", false};
   sptk::WSDateTime               m_verified {"verified", false};
   sptk::WSBool                   m_retired {"retired", false};
   sptk::WSDouble                 m_hour_rate {"hour_rate", false};
   sptk::WSInteger                m_vacation_days {"vacation_days", false};
   sptk::WSDouble                 m_height {"height", false};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;
   static const sptk::Strings m_elementNames;
   static const sptk::Strings m_attributeNames;
   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional           Is element optional flag
    */
   explicit CHelloResponse(const char* elementName="hello_response", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {
      WSComplexType::setElements(m_elementNames, {&m_date_of_birth, &m_verified, &m_retired, &m_hour_rate, &m_vacation_days, &m_height});
   }

   /**
    * Copy constructor
    * @param other              Other object
    */
   explicit CHelloResponse(const CHelloResponse& other)
   : sptk::WSComplexType(other),
     m_date_of_birth(other.m_date_of_birth),
     m_verified(other.m_verified),
     m_retired(other.m_retired),
     m_hour_rate(other.m_hour_rate),
     m_vacation_days(other.m_vacation_days),
     m_height(other.m_height)
   {
      WSComplexType::setElements(m_elementNames, {&m_date_of_birth, &m_verified, &m_retired, &m_hour_rate, &m_vacation_days, &m_height});
   }

   /**
    * Move constructor
    * @param other              Other object
    */
   explicit CHelloResponse(CHelloResponse&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_date_of_birth(std::move(other.m_date_of_birth)),
     m_verified(std::move(other.m_verified)),
     m_retired(std::move(other.m_retired)),
     m_hour_rate(std::move(other.m_hour_rate)),
     m_vacation_days(std::move(other.m_vacation_days)),
     m_height(std::move(other.m_height))
   {
      WSComplexType::setElements(m_elementNames, {&m_date_of_birth, &m_verified, &m_retired, &m_hour_rate, &m_vacation_days, &m_height});
   }

   /**
    * Destructor
    */
   ~CHelloResponse() = default;

   /**
    * Copy assignment
    * @param other              Other object
    */
   CHelloResponse& operator = (const CHelloResponse& other)
   {
      m_date_of_birth = other.m_date_of_birth;
      m_verified = other.m_verified;
      m_retired = other.m_retired;
      m_hour_rate = other.m_hour_rate;
      m_vacation_days = other.m_vacation_days;
      m_height = other.m_height;
      return *this;
   }

   /**
    * Move assignment
    * @param other              Other object
    */
   CHelloResponse& operator = (CHelloResponse&& other) noexcept
   {
      m_date_of_birth = std::move(other.m_date_of_birth);
      m_verified = std::move(other.m_verified);
      m_retired = std::move(other.m_retired);
      m_hour_rate = std::move(other.m_hour_rate);
      m_vacation_days = std::move(other.m_vacation_days);
      m_height = std::move(other.m_height);
      return *this;
   }

   /**
    * Unload content to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Node* output) const override;

   /**
    * Unload content to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload content to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }

private:

   /**
    * Check restrictions
    * Throws an exception if any restriction is violated.
    */
   void checkRestrictions() const override;
};

}
