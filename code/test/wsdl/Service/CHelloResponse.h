#ifndef __CHELLORESPONSE__
#define __CHELLORESPONSE__

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

/**
 * WSDL complex type class CHelloResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CHelloResponse : public sptk::WSComplexType
{
    mutable sptk::SharedMutex m_mutex; ///< Mutex that protects access to internal data

public:

   // Elements
   sptk::WSDate         m_date_of_birth {"date_of_birth"};
   sptk::WSDateTime     m_verified {"verified"};
   sptk::WSBool         m_retired {"retired"};
   sptk::WSDouble       m_hour_rate {"hour_rate"};
   sptk::WSInteger      m_vacation_days {"vacation_days"};
   sptk::WSDouble       m_height {"height"};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;

protected:

   /**
    * Clear content and releases allocated memory (internal)
    */
   void _clear() override;

public:

   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional bool, Is element optional flag
    */
   explicit CHelloResponse(const char* elementName="hello_response", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {}

   /**
    * Copy constructor
    * @param other              Other element to copy from
    */
   CHelloResponse(const CHelloResponse& other) noexcept
   : sptk::WSComplexType(other),
     m_date_of_birth(other.m_date_of_birth),
     m_verified(other.m_verified),
     m_retired(other.m_retired),
     m_hour_rate(other.m_hour_rate),
     m_vacation_days(other.m_vacation_days),
     m_height(other.m_height)
   {
   }

   /**
    * Move constructor
    * @param other              Other element to move from
    */
   CHelloResponse(CHelloResponse&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_date_of_birth(std::move(other.m_date_of_birth)),
     m_verified(std::move(other.m_verified)),
     m_retired(std::move(other.m_retired)),
     m_hour_rate(std::move(other.m_hour_rate)),
     m_vacation_days(std::move(other.m_vacation_days)),
     m_height(std::move(other.m_height))
   {
       other.clear();
   }

   /**
    * Destructor
    */
   ~CHelloResponse() override;

   /**
    * Copy assignment
    * @param other              Other element to copy from
    */
   CHelloResponse& operator = (const CHelloResponse& other)
   {
       if (&other != this)
           copyFrom(other);
       return *this;
   }

   /**
    * Move assignment
    * @param other              Other element to move from
    */
   CHelloResponse& operator = (CHelloResponse&& other) noexcept
   {
       if (&other == this)
           return *this;
       copyFrom(other);
       other.clear();
       return *this;
   }

   /**
    * Load CHelloResponse from XML node
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              XML node containing CHelloResponse data
    */
   void load(const sptk::xml::Element* input) override;

   /**
    * Load CHelloResponse from JSON element
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              JSON element containing CHelloResponse data
    */
   void load(const sptk::json::Element* input) override;

   /**
    * Load CHelloResponse from FieldList
    *
    * Only simple WSDL type members are loaded.
    * @param input              Query field list containing CHelloResponse data
    */
   void load(const sptk::FieldList& input) override;

   /**
    * Unload CHelloResponse to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Element* output) const override;

   /**
    * Unload CHelloResponse to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload CHelloResponse to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }
};

typedef std::shared_ptr<CHelloResponse> SHelloResponse;

#endif
