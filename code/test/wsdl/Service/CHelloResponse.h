#ifndef __TEST_SERVICE_CHELLORESPONSE__
#define __TEST_SERVICE_CHELLORESPONSE__

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CHelloResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CHelloResponse : public sptk::WSComplexType
{
public:

   // Elements
   sptk::WSDate         m_date_of_birth {"date_of_birth"};
   sptk::WSDateTime     m_verified {"verified"};
   sptk::WSBool         m_retired {"retired"};
   sptk::WSDouble       m_hour_rate {"hour_rate"};
   sptk::WSInteger      m_vacation_days {"vacation_days"};
   sptk::WSDouble       m_height {"height"};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;
   static const sptk::Strings m_elementNames;
   static const sptk::Strings m_attributeNames;
   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional bool, Is element optional flag
    */
   explicit CHelloResponse(const char* elementName="hello_response", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {}

   /**
    * Load content from XML node
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              XML node containing CHelloResponse data
    */
   void load(const sptk::xml::Element* input) override;

   /**
    * Load content from JSON element
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              JSON element containing CHelloResponse data
    */
   void load(const sptk::json::Element* input) override;

   /**
    * Load content from FieldList
    *
    * Only simple WSDL type members are loaded.
    * @param input              Query field list containing CHelloResponse data
    */
   void load(const sptk::FieldList& input) override;

   /**
    * Unload content to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Element* output) const override;

   /**
    * Unload content to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload content to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;

   /**
    * Check if null
    * @return true if all elements and attributes are null
    */
   bool isNull() const override;

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }

protected:

   /**
    * Clear content and release allocated memory (internal)
    */
   void _clear() override;
};

typedef std::shared_ptr<CHelloResponse> SHelloResponse;

}

#endif
