// Auto-generated by wsdl2cxx

#include "CTestWSDL.h"

const sptk::Strings Test_wsdlRows({
    R"(<?xml version="1.0" encoding="UTF-8" standalone="no"?>)",
    R"(<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:tns="http://www.example.org/Test/")",
    R"(                  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="Test")",
    R"(                  targetNamespace="http://www.example.org/Test/">)",
    R"(    <wsdl:types>)",
    R"(        <xsd:schema targetNamespace="http://www.example.org/Test/">)",
    R"(            <xsd:element name="Hello">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="action" type="xsd:string"/>)",
    R"(                        <xsd:element name="first_name" type="xsd:string"/>)",
    R"(                        <xsd:element name="last_name" type="xsd:string"></xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"(            <xsd:element name="HelloResponse">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="date_of_birth" type="xsd:date"/>)",
    R"(                        <xsd:element name="verified" type="xsd:dateTime"></xsd:element>)",
    R"(                        <xsd:element name="retired" type="xsd:boolean"></xsd:element>)",
    R"(                        <xsd:element name="hour_rate" type="xsd:double"></xsd:element>)",
    R"(                        <xsd:element name="vacation_days" type="xsd:int"></xsd:element>)",
    R"(                        <xsd:element name="height" type="xsd:float"></xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"(            <xsd:element name="Login">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="username" type="xsd:string"></xsd:element>)",
    R"(                        <xsd:element name="password" type="xsd:string"></xsd:element>)",
    R"(                        <xsd:element name="servers" type="xsd:string" maxOccurs="unbounded" minOccurs="0">)",
    R"(                        </xsd:element>)",
    R"(                        <xsd:element name="project" type="tns:ProjectInfo")",
    R"(                                     maxOccurs="1" minOccurs="0">)",
    R"(                        </xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                    <xsd:attribute name="server_count" type="xsd:int"></xsd:attribute>)",
    R"(                    <xsd:attribute name="type" type="xsd:string"></xsd:attribute>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"(            <xsd:element name="LoginResponse">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="jwt" type="xsd:string"></xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"(            <xsd:element name="AccountBalance">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="account_number" type="xsd:string"></xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"(            <xsd:element name="AccountBalanceResponse">)",
    R"(                <xsd:complexType>)",
    R"(                    <xsd:sequence>)",
    R"(                        <xsd:element name="account_balance" type="xsd:double"></xsd:element>)",
    R"(                    </xsd:sequence>)",
    R"(                </xsd:complexType>)",
    R"(            </xsd:element>)",
    R"()",
    R"(            <xsd:complexType name="ProjectInfo">)",
    R"(                <xsd:sequence>)",
    R"(                    <xsd:element name="id" type="xsd:int"></xsd:element>)",
    R"(                    <xsd:element name="expiration" type="xsd:string"></xsd:element>)",
    R"(                </xsd:sequence>)",
    R"(            </xsd:complexType>)",
    R"(        </xsd:schema>)",
    R"(    </wsdl:types>)",
    R"(    <wsdl:message name="HelloRequest">)",
    R"(        <wsdl:part element="tns:Hello" name="parameters"/>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:message name="HelloResponse">)",
    R"(        <wsdl:part element="tns:HelloResponse" name="parameters"/>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:message name="LoginRequest">)",
    R"(        <wsdl:part name="parameters" element="tns:Login"></wsdl:part>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:message name="LoginResponse">)",
    R"(        <wsdl:part name="parameters" element="tns:LoginResponse"></wsdl:part>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:message name="AccountBalanceRequest">)",
    R"(        <wsdl:part name="parameters" element="tns:AccountBalance"></wsdl:part>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:message name="AccountBalanceResponse">)",
    R"(        <wsdl:part name="parameters" element="tns:AccountBalanceResponse"></wsdl:part>)",
    R"(    </wsdl:message>)",
    R"(    <wsdl:portType name="Test">)",
    R"(        <wsdl:operation name="Hello">)",
    R"(            <wsdl:input message="tns:HelloRequest"/>)",
    R"(            <wsdl:output message="tns:HelloResponse"/>)",
    R"(        </wsdl:operation>)",
    R"(        <wsdl:operation name="Login">)",
    R"(            <wsdl:input message="tns:LoginRequest"></wsdl:input>)",
    R"(            <wsdl:output message="tns:LoginResponse"></wsdl:output>)",
    R"(        </wsdl:operation>)",
    R"(        <wsdl:operation name="AccountBalance">)",
    R"(            <wsdl:input message="tns:AccountBalanceRequest"></wsdl:input>)",
    R"(            <wsdl:output message="tns:AccountBalanceResponse"></wsdl:output>)",
    R"(        </wsdl:operation>)",
    R"(    </wsdl:portType>)",
    R"(    <wsdl:binding name="TestSOAP" type="tns:Test">)",
    R"(        <soap:binding style="document")",
    R"(                      transport="http://schemas.xmlsoap.org/soap/http"/>)",
    R"(        <wsdl:operation name="Hello">)",
    R"(            <soap:operation)",
    R"(                    soapAction="http://www.example.org/Test/Hello"/>)",
    R"(            <wsdl:input>)",
    R"(                <soap:body use="literal"/>)",
    R"(            </wsdl:input>)",
    R"(            <wsdl:output>)",
    R"(                <soap:body use="literal"/>)",
    R"(            </wsdl:output>)",
    R"(        </wsdl:operation>)",
    R"(    </wsdl:binding>)",
    R"(    <wsdl:service name="Test">)",
    R"(        <wsdl:port binding="tns:TestSOAP" name="TestSOAP">)",
    R"(            <soap:address location="http://www.example.org/"/>)",
    R"(        </wsdl:port>)",
    R"(    </wsdl:service>)",
    R"(</wsdl:definitions>)"
});

const sptk::String Test_wsdl(Test_wsdlRows.join("\n"));

const sptk::Strings Test_openapiRows({
    R"({)",
    R"(  "openapi": "3.0.0",)",
    R"(  "info": {)",
    R"(    "title": "Test",)",
    R"(    "description": "",)",
    R"(    "version": "1.0.0")",
    R"(  },)",
    R"(  "servers": [)",
    R"(    {)",
    R"(      "url": "http://www.example.org/")",
    R"(    })",
    R"(  ],)",
    R"(  "paths": {)",
    R"(    "/AccountBalance": {)",
    R"(      "post": {)",
    R"(        "summary": "",)",
    R"(        "operationId": "AccountBalance",)",
    R"(        "requestBody": {)",
    R"(          "content": {)",
    R"(            "application/json": {)",
    R"(              "schema": {)",
    R"(                "$ref": "#/components/schemas/AccountBalance")",
    R"(              })",
    R"(            })",
    R"(          })",
    R"(        },)",
    R"(        "responses": {)",
    R"(          "200": {)",
    R"(            "description": "Ok",)",
    R"(            "responseContent": {)",
    R"(              "application/json": {)",
    R"(                "responseSchema": {)",
    R"(                  "$responseRef": "#/components/schemas/AccountBalanceResponse")",
    R"(                })",
    R"(              })",
    R"(            })",
    R"(          },)",
    R"(          "401": {)",
    R"(            "description": "Unauthorized")",
    R"(          },)",
    R"(          "404": {)",
    R"(            "description": "Not found")",
    R"(          },)",
    R"(          "500": {)",
    R"(            "description": "Server error")",
    R"(          })",
    R"(        })",
    R"(      })",
    R"(    },)",
    R"(    "/Hello": {)",
    R"(      "post": {)",
    R"(        "summary": "",)",
    R"(        "operationId": "Hello",)",
    R"(        "requestBody": {)",
    R"(          "content": {)",
    R"(            "application/json": {)",
    R"(              "schema": {)",
    R"(                "$ref": "#/components/schemas/Hello")",
    R"(              })",
    R"(            })",
    R"(          })",
    R"(        },)",
    R"(        "responses": {)",
    R"(          "200": {)",
    R"(            "description": "Ok",)",
    R"(            "responseContent": {)",
    R"(              "application/json": {)",
    R"(                "responseSchema": {)",
    R"(                  "$responseRef": "#/components/schemas/HelloResponse")",
    R"(                })",
    R"(              })",
    R"(            })",
    R"(          },)",
    R"(          "401": {)",
    R"(            "description": "Unauthorized")",
    R"(          },)",
    R"(          "404": {)",
    R"(            "description": "Not found")",
    R"(          },)",
    R"(          "500": {)",
    R"(            "description": "Server error")",
    R"(          })",
    R"(        })",
    R"(      })",
    R"(    },)",
    R"(    "/Login": {)",
    R"(      "post": {)",
    R"(        "summary": "",)",
    R"(        "operationId": "Login",)",
    R"(        "requestBody": {)",
    R"(          "content": {)",
    R"(            "application/json": {)",
    R"(              "schema": {)",
    R"(                "$ref": "#/components/schemas/Login")",
    R"(              })",
    R"(            })",
    R"(          })",
    R"(        },)",
    R"(        "responses": {)",
    R"(          "200": {)",
    R"(            "description": "Ok",)",
    R"(            "responseContent": {)",
    R"(              "application/json": {)",
    R"(                "responseSchema": {)",
    R"(                  "$responseRef": "#/components/schemas/LoginResponse")",
    R"(                })",
    R"(              })",
    R"(            })",
    R"(          },)",
    R"(          "401": {)",
    R"(            "description": "Unauthorized")",
    R"(          },)",
    R"(          "404": {)",
    R"(            "description": "Not found")",
    R"(          },)",
    R"(          "500": {)",
    R"(            "description": "Server error")",
    R"(          })",
    R"(        })",
    R"(      })",
    R"(    })",
    R"(  },)",
    R"(  "components": {)",
    R"(    "schemas": {)",
    R"(      "AccountBalance": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "account_number": {)",
    R"(            "type": "string")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "account_number")",
    R"(        ])",
    R"(      },)",
    R"(      "AccountBalanceResponse": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "account_balance": {)",
    R"(            "type": "number",)",
    R"(            "format": "double")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "account_balance")",
    R"(        ])",
    R"(      },)",
    R"(      "Hello": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "action": {)",
    R"(            "type": "string")",
    R"(          },)",
    R"(          "first_name": {)",
    R"(            "type": "string")",
    R"(          },)",
    R"(          "last_name": {)",
    R"(            "type": "string")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "action",)",
    R"(          "first_name",)",
    R"(          "last_name")",
    R"(        ])",
    R"(      },)",
    R"(      "HelloResponse": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "date_of_birth": {)",
    R"(          },)",
    R"(          "verified": {)",
    R"(            "type": "string",)",
    R"(            "format": "date-time")",
    R"(          },)",
    R"(          "retired": {)",
    R"(            "type": "boolean")",
    R"(          },)",
    R"(          "hour_rate": {)",
    R"(            "type": "number",)",
    R"(            "format": "double")",
    R"(          },)",
    R"(          "vacation_days": {)",
    R"(            "type": "integer",)",
    R"(            "format": "int64")",
    R"(          },)",
    R"(          "height": {)",
    R"(            "type": "number",)",
    R"(            "format": "double")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "date_of_birth",)",
    R"(          "verified",)",
    R"(          "retired",)",
    R"(          "hour_rate",)",
    R"(          "vacation_days",)",
    R"(          "height")",
    R"(        ])",
    R"(      },)",
    R"(      "Login": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "username": {)",
    R"(            "type": "string")",
    R"(          },)",
    R"(          "password": {)",
    R"(            "type": "string")",
    R"(          },)",
    R"(          "servers": {)",
    R"(            "type": "string")",
    R"(          },)",
    R"(          "project": {)",
    R"(            "$ref": "#/components/schemas/ProjectInfo")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "username",)",
    R"(          "password",)",
    R"(          "servers")",
    R"(        ])",
    R"(      },)",
    R"(      "LoginResponse": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "jwt": {)",
    R"(            "type": "string")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "jwt")",
    R"(        ])",
    R"(      },)",
    R"(      "ProjectInfo": {)",
    R"(        "type": "object",)",
    R"(        "properties": {)",
    R"(          "id": {)",
    R"(            "type": "integer",)",
    R"(            "format": "int64")",
    R"(          },)",
    R"(          "expiration": {)",
    R"(            "type": "string")",
    R"(          })",
    R"(        },)",
    R"(        "required": [)",
    R"(          "id",)",
    R"(          "expiration")",
    R"(        ])",
    R"(      })",
    R"(    },)",
    R"(    "securitySchemes": {)",
    R"(      "basicAuth": {)",
    R"(        "type": "http",)",
    R"(        "scheme": "basic")",
    R"(      },)",
    R"(      "bearerAuth": {)",
    R"(        "type": "http",)",
    R"(        "scheme": "bearer",)",
    R"(        "bearerFormat": "JWT")",
    R"(      })",
    R"(    })",
    R"(  })",
    R"(})"
});

const sptk::String Test_openapi(Test_openapiRows.join("\n"));
