#pragma once

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CAccountBalance.
 * Generated by wsdl2cxx SPTK utility.
 */
class CAccountBalance : public sptk::WSComplexType
{
public:

   // Elements
   sptk::WSString                 m_account_number {"account_number", false};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;
   static const sptk::Strings m_elementNames;
   static const sptk::Strings m_attributeNames;
   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional           Is element optional flag
    */
   explicit CAccountBalance(const char* elementName="account_balance", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {
      WSComplexType::setElements(m_elementNames, {&m_account_number});
   }

   /**
    * Copy constructor
    * @param other              Other object
    */
   explicit CAccountBalance(const CAccountBalance& other)
   : sptk::WSComplexType(other),
     m_account_number(other.m_account_number)
   {
      WSComplexType::setElements(m_elementNames, {&m_account_number});
   }

   /**
    * Move constructor
    * @param other              Other object
    */
   explicit CAccountBalance(CAccountBalance&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_account_number(std::move(other.m_account_number))
   {
      WSComplexType::setElements(m_elementNames, {&m_account_number});
   }

   /**
    * Destructor
    */
   ~CAccountBalance() = default;

   /**
    * Copy assignment
    * @param other              Other object
    */
   CAccountBalance& operator = (const CAccountBalance& other)
   {
      m_account_number = other.m_account_number;
      return *this;
   }

   /**
    * Move assignment
    * @param other              Other object
    */
   CAccountBalance& operator = (CAccountBalance&& other) noexcept
   {
      m_account_number = std::move(other.m_account_number);
      return *this;
   }

   /**
    * Unload content to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Node* output) const override;

   /**
    * Unload content to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload content to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }

private:

   /**
    * Check restrictions
    * Throws an exception if any restriction is violated.
    */
   void checkRestrictions() const override;
};

}
