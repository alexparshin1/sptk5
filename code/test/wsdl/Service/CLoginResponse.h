#pragma once

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CLoginResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CLoginResponse : public sptk::WSComplexType
{
public:

   // Elements
   sptk::WSString                           m_jwt {"jwt", false};

   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional           Is element optional flag
    */
   explicit CLoginResponse(const char* elementName="login_response", bool optional=false) noexcept;

   /**
    * Copy constructor
    * @param other              Other object
    */
   CLoginResponse(const CLoginResponse& other);

   /**
    * Move constructor
    * @param other              Other object
    */
   CLoginResponse(CLoginResponse&& other) noexcept;

   /**
    * Destructor
    */
   ~CLoginResponse() = default;

   /**
    * Copy assignment
    * @param other              Other object
    */
   CLoginResponse& operator = (const CLoginResponse& other);

   /**
    * Move assignment
    * @param other              Other object
    */
   CLoginResponse& operator = (CLoginResponse&& other) noexcept;

   /**
    * Get complex type field names.
    * @param group              Field group: elements, attributes, or both
    * @return list of fields as Strings
    */
   static const sptk::Strings& fieldNames(sptk::WSFieldIndex::FieldGroup group);

private:

   /**
    * Check restrictions
    * Throws an exception if any restriction is violated.
    */
   void checkRestrictions() const override;
};

}
