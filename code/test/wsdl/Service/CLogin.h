#pragma once

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CLogin.
 * Generated by wsdl2cxx SPTK utility.
 */
class CLogin : public sptk::WSComplexType
{
public:

   // Elements
   sptk::WSString                 m_username {"username", false};
   sptk::WSString                 m_password {"password", false};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;
   static const sptk::Strings m_elementNames;
   static const sptk::Strings m_attributeNames;
   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional           Is element optional flag
    */
   explicit CLogin(const char* elementName="login", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {
      WSComplexType::setElements(m_elementNames, {&m_username, &m_password});
   }

   /**
    * Copy constructor
    * @param other              Other object
    */
   explicit CLogin(const CLogin& other)
   : sptk::WSComplexType(other),
     m_username(other.m_username),
     m_password(other.m_password)
   {
      WSComplexType::setElements(m_elementNames, {&m_username, &m_password});
   }

   /**
    * Move constructor
    * @param other              Other object
    */
   explicit CLogin(CLogin&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_username(std::move(other.m_username)),
     m_password(std::move(other.m_password))
   {
      WSComplexType::setElements(m_elementNames, {&m_username, &m_password});
   }

   /**
    * Destructor
    */
   ~CLogin() = default;

   /**
    * Copy assignment
    * @param other              Other object
    */
   CLogin& operator = (const CLogin& other)
   {
      m_username = other.m_username;
      m_password = other.m_password;
      return *this;
   }

   /**
    * Move assignment
    * @param other              Other object
    */
   CLogin& operator = (CLogin&& other) noexcept
   {
      m_username = std::move(other.m_username);
      m_password = std::move(other.m_password);
      return *this;
   }

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }

private:

   /**
    * Check restrictions
    * Throws an exception if any restriction is violated.
    */
   void checkRestrictions() const override;
};

}
