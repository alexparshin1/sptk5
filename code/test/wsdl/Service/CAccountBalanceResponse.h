#ifndef __CACCOUNTBALANCERESPONSE__
#define __CACCOUNTBALANCERESPONSE__

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

/**
 * WSDL complex type class CAccountBalanceResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CAccountBalanceResponse : public sptk::WSComplexType
{
    mutable sptk::SharedMutex m_mutex; ///< Mutex that protects access to internal data

public:

   // Elements
   sptk::WSDouble       m_account_balance {"account_balance"};

   // Field names of simple types, that can be used to build SQL queries
   static const sptk::Strings m_fieldNames;

protected:

   /**
    * Clear content and releases allocated memory (internal)
    */
   void _clear() override;

public:

   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional bool, Is element optional flag
    */
   explicit CAccountBalanceResponse(const char* elementName="account_balance_response", bool optional=false) noexcept
   : sptk::WSComplexType(elementName, optional)
   {}

   /**
    * Copy constructor
    * @param other              Other element to copy from
    */
   CAccountBalanceResponse(const CAccountBalanceResponse& other) noexcept
   : sptk::WSComplexType(other),
     m_account_balance(other.m_account_balance)
   {
   }

   /**
    * Move constructor
    * @param other              Other element to move from
    */
   CAccountBalanceResponse(CAccountBalanceResponse&& other) noexcept
   : sptk::WSComplexType(std::move(other)),
     m_account_balance(std::move(other.m_account_balance))
   {
       other.clear();
   }

   /**
    * Destructor
    */
   ~CAccountBalanceResponse() override;

   /**
    * Copy assignment
    * @param other              Other element to copy from
    */
   CAccountBalanceResponse& operator = (const CAccountBalanceResponse& other)
   {
       if (&other != this)
           copyFrom(other);
       return *this;
   }

   /**
    * Move assignment
    * @param other              Other element to move from
    */
   CAccountBalanceResponse& operator = (CAccountBalanceResponse&& other) noexcept
   {
       if (&other == this)
           return *this;
       copyFrom(other);
       other.clear();
       return *this;
   }

   /**
    * Load CAccountBalanceResponse from XML node
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              XML node containing CAccountBalanceResponse data
    */
   void load(const sptk::xml::Element* input) override;

   /**
    * Load CAccountBalanceResponse from JSON element
    *
    * Complex WSDL type members are loaded recursively.
    * @param input              JSON element containing CAccountBalanceResponse data
    */
   void load(const sptk::json::Element* input) override;

   /**
    * Load CAccountBalanceResponse from FieldList
    *
    * Only simple WSDL type members are loaded.
    * @param input              Query field list containing CAccountBalanceResponse data
    */
   void load(const sptk::FieldList& input) override;

   /**
    * Unload CAccountBalanceResponse to existing XML node
    * @param output             Existing XML node
    */
   void unload(sptk::xml::Element* output) const override;

   /**
    * Unload CAccountBalanceResponse to existing JSON node
    * @param output             Existing JSON node
    */
   void unload(sptk::json::Element* output) const override;

   /**
    * Unload CAccountBalanceResponse to Query's parameters
    * @param output             Query parameters
    */
   void unload(sptk::QueryParameterList& output) const override;

   /**
    * Get simple field names that can be used to build SQL queries.
    * Return list of fields doesn't include fields of complex type.
    * @return list of fields as string vector
    */
   static const sptk::Strings& fieldNames() { return m_fieldNames; }
};

typedef std::shared_ptr<CAccountBalanceResponse> SAccountBalanceResponse;

#endif
