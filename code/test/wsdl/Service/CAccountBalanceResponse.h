#pragma once

#include <sptk5/FieldList.h>
#include <sptk5/db/QueryParameterList.h>
#include <sptk5/sptk.h>
#include <sptk5/threads/Locks.h>
#include <sptk5/wsdl/WSBasicTypes.h>
#include <sptk5/wsdl/WSComplexType.h>
#include <sptk5/wsdl/WSRestriction.h>

namespace test_service {

/**
 * WSDL complex type class CAccountBalanceResponse.
 * Generated by wsdl2cxx SPTK utility.
 */
class CAccountBalanceResponse : public sptk::WSComplexType
{
public:

    /**
     * ID of the class
     */
    static sptk::String classId()
    {
        return "AccountBalanceResponse";
    }

   // Elements
   sptk::WSDouble                           m_account_balance {"account_balance", false};

   /**
    * Constructor
    * @param elementName        WSDL element name
    * @param optional           Is element optional flag
    */
   explicit CAccountBalanceResponse(const char* elementName="account_balance_response", bool optional=false) noexcept;

   /**
    * Copy constructor
    * @param other              Other object
    */
   CAccountBalanceResponse(const CAccountBalanceResponse& other);

   /**
    * Move constructor
    * @param other              Other object
    */
   CAccountBalanceResponse(CAccountBalanceResponse&& other) noexcept;

   /**
    * Destructor
    */
   ~CAccountBalanceResponse() override = default;

   /**
    * Copy assignment
    * @param other              Other object
    */
   CAccountBalanceResponse& operator = (const CAccountBalanceResponse& other);

   /**
    * Move assignment
    * @param other              Other object
    */
   CAccountBalanceResponse& operator = (CAccountBalanceResponse&& other) noexcept;

   /**
    * Get complex type field names.
    * @param group              Field group: elements, attributes, or both
    * @return list of fields as Strings
    */
   static const sptk::Strings& fieldNames(sptk::WSFieldIndex::Group group);

private:

   /**
    * Check restrictions
    * Throws an exception if any restriction is violated.
    */
   void checkRestrictions() const override;
};

}
