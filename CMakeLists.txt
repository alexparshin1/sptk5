# Under Cygwin, CMake 2.8.4 and newer doesn't define WIN32 anymore.
# For other environments, required CMake version can be 2.6 or higher.
CMAKE_MINIMUM_REQUIRED(VERSION 2.8.4)


# The name of our project is "SPTK".  CMakeLists files in this project can
# refer to the root source directory of the project as ${SPTK_SOURCE_DIR} and
# to the root binary directory of the project as ${SPTK_BINARY_DIR}.
PROJECT (SPTK)


#SET (CMAKE_BUILD_TYPE Release)
SET (CMAKE_BUILD_TYPE Debug)

SET (VERSION "4.99.01")

# Place compiled libraries and examples into ./bin/
SET (LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/lib)

OPTION (USE_FLTK       "Build SPTK GUI library" ON)

INCLUDE (${CMAKE_ROOT}/Modules/FindASPELL.cmake)
INCLUDE (${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)
INCLUDE (${CMAKE_ROOT}/Modules/TestBigEndian.cmake)
INCLUDE (${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)

CHECK_TYPE_SIZE(int INT)
CHECK_TYPE_SIZE(long LONG)
CHECK_TYPE_SIZE(short SHORT)
CHECK_TYPE_SIZE(double DOUBLE)

TEST_BIG_ENDIAN(BIG_ENDIAN_INIT)


MESSAGE ("Build type:         " ${CMAKE_BUILD_TYPE})
IF (WIN32)
  ADD_DEFINITIONS (-DHAVE_CONFIG_H -DWIN32)
  LINK_LIBRARIES(wsock32 ole32 uuid comctl32)
ELSE (WIN32)
  ADD_DEFINITIONS (-Wall)
  LINK_LIBRARIES(pthread rt)
ENDIF (WIN32)


IF (WIN32)
  #SET (LIBRARY_TYPE STATIC)
  SET (LIBRARY_TYPE SHARED)
  IF (LIBRARY_TYPE STREQUAL "SHARED")
    ADD_DEFINITIONS (-DSP_DLL)
  ENDIF(LIBRARY_TYPE STREQUAL "SHARED")
ELSE (WIN32)
  SET (LIBRARY_TYPE SHARED)
ENDIF (WIN32)
MESSAGE ("Library type:       " ${LIBRARY_TYPE})


SET (ODBC_FLAG "0")
IF (NOT NO_ODBC)
  IF (WIN32)
    SET (ODBC_FLAG "1")
    SET (ODBC_LIBRARY "odbc32")
  ELSE (WIN32)
    FIND_LIBRARY (ODBC_LIBRARY NAMES odbc PATHS /usr/lib /usr/local/lib)
  ENDIF (WIN32)

  IF (ODBC_LIBRARY)
    SET (ODBC_FLAG "1")
    LINK_LIBRARIES(${ODBC_LIBRARY})
  ENDIF (ODBC_LIBRARY)
ENDIF (NOT NO_ODBC)

IF (ODBC_FLAG)
  MESSAGE("ODBC support:       compile")
ELSE (ODBC_FLAG)
  MESSAGE("ODBC support:       don't compile")
  SET (ODBC_LIBRARY "")
ENDIF (ODBC_FLAG)

FIND_LIBRARY (SOCKET_LIBRARY NAMES socket PATHS /usr/lib)
IF (NOT SOCKET_LIBRARY)
  SET (SOCKET_LIBRARY "")
ELSE (NOT SOCKET_LIBRARY)
  SET (SOCKET_LIBRARY "-lsocket -lrt -lnsl")
ENDIF (NOT SOCKET_LIBRARY)

SET (POSTGRESQL_FLAG "0")
IF (NOT NO_POSTGRESQL)
  FIND_LIBRARY (POSTGRESQL_LIBRARY pq /usr/lib /usr/local/lib)
  IF (POSTGRESQL_LIBRARY)
    SET (POSTGRESQL_FLAG "1")
  ELSE (POSTGRESQL_LIBRARY)
    SET (POSTGRESQL_LIBRARY "")
  ENDIF (POSTGRESQL_LIBRARY)
ELSE (NOT NO_POSTGRESQL)
  SET (POSTGRESQL_LIBRARY "")
ENDIF (NOT NO_POSTGRESQL)

IF (POSTGRESQL_FLAG)
  MESSAGE("POSTGRESQL support: compile")
ELSE (POSTGRESQL_FLAG)
  MESSAGE("POSTGRESQL support: don't compile")
ENDIF (POSTGRESQL_FLAG)

SET (SQLITE3_FLAG "0")
IF (NOT NO_SQLITE3)
  FIND_LIBRARY (SQLITE3_LIBRARY NAMES sqlite3 PATHS /usr/lib /usr/local/lib)
  IF (NOT SQLITE3_LIBRARY AND WIN32)
    FIND_FILE (SQLITE3_LIBRARY sqlite3.dll PATHS /usr/lib /usr/local/lib)
  ENDIF (NOT SQLITE3_LIBRARY AND WIN32)
  IF (SQLITE3_LIBRARY)
    SET (SQLITE3_LIBRARY "sqlite3")
    SET (SQLITE3_FLAG "1")
  ELSE (SQLITE3_LIBRARY)
    SET (SQLITE3_LIBRARY "")
  ENDIF (SQLITE3_LIBRARY)
ENDIF (NOT NO_SQLITE3)

IF (SQLITE3_FLAG)
  MESSAGE("SQLITE3 support:    compile")
ELSE (SQLITE3_FLAG)
  MESSAGE("SQLITE3 support:    don't compile")
ENDIF (SQLITE3_FLAG)

# Detect FLTK and Aspell
SET (FLTK_FLAG "0")
SET (ASPELL_FLAG "0")
IF (USE_FLTK)
    FIND_PACKAGE (FLTK QUIET)
    IF (FLTK_FOUND)
        SET (FLTK_FLAG "1")
        #ADD_DEFINITIONS (${FLTK_CXX_FLAGS})
    ENDIF (FLTK_FOUND)
    IF (FLTK_FOUND)
        FIND_PACKAGE (ASPELL)
        IF (ASPELL_FOUND)
            SET (ASPELL_FLAG "1")
        ELSE (ASPELL_FOUND)
            SET (ASPELL_LIBRARIES "")
        ENDIF (ASPELL_FOUND)
    ENDIF (FLTK_FOUND)
ENDIF (USE_FLTK)

IF (FLTK_FOUND)
  MESSAGE("FLTK support:       compile")
ELSE (FLTK_FOUND)
  MESSAGE("FLTK support:       don't compile")
ENDIF (FLTK_FOUND)

IF (ASPELL_FLAG)
  MESSAGE("ASPELL support:     compile")
ELSE (ASPELL_FLAG)
  MESSAGE("ASPELL support:     don't compile")
ENDIF (ASPELL_FLAG)


IF (WIN32)
  # Windows message resource compiler (included with Windows SDK)
  FIND_PROGRAM (MC_COMPILER mc PATHS "$ENV{ProgramFiles}/Microsoft SDKs/Windows/*/Bin")
  IF (MC_COMPILER)
    MESSAGE("Windows SDK mc:     found")
  ELSE (MC_COMPILER)
    MESSAGE("Windows SDK mc:     not found")
  ENDIF (MC_COMPILER)
  ADD_SUBDIRECTORY (events.w32)
ENDIF (WIN32)

SET (THEMES_PREFIX ${CMAKE_INSTALL_PREFIX})

SET (HAVE_PTHREAD_MUTEX_TIMEDLOCK "0")
SET (HAVE_PTHREAD_RWLOCK_TIMEDRDLOCK "0")
SET (HAVE_PTHREAD_RWLOCK_TIMEDWRLOCK "0")
IF (UNIX)
    SET (CMAKE_REQUIRED_LIBRARIES pthread)

    CHECK_FUNCTION_EXISTS(pthread_mutex_timedlock PTHREAD_MUTEX_TIMEDLOCK)
    IF (PTHREAD_MUTEX_TIMEDLOCK)
        SET (HAVE_PTHREAD_MUTEX_TIMEDLOCK "1")
    ENDIF (PTHREAD_MUTEX_TIMEDLOCK)

    CHECK_FUNCTION_EXISTS(pthread_rwlock_timedrdlock PTHREAD_RWLOCK_TIMEDRDLOCK)
    IF (PTHREAD_RWLOCK_TIMEDRDLOCK)
        SET (HAVE_PTHREAD_RWLOCK_TIMEDRDLOCK "1")
        SET (HAVE_PTHREAD_RWLOCK_TIMEDWRLOCK "1")
    ENDIF (PTHREAD_RWLOCK_TIMEDRDLOCK)
ENDIF (UNIX)

CONFIGURE_FILE ("sptk5/sptk-config.h.cmake" "sptk5/sptk-config.h" @ONLY)

IF (FLTK_FLAG)
  ADD_SUBDIRECTORY (themes)
ENDIF (FLTK_FLAG)

ADD_SUBDIRECTORY (src)
ADD_SUBDIRECTORY (examples)

FILE (GLOB includeFiles "${CMAKE_CURRENT_SOURCE_DIR}/sptk5/*.h")
INSTALL (FILES ${includeFiles} DESTINATION include/sptk5)

FILE (GLOB includeFilesXML "${CMAKE_CURRENT_SOURCE_DIR}/sptk5/xml/*.h")
INSTALL (FILES ${includeFilesXML} DESTINATION include/sptk5/xml)

FILE (GLOB includeFilesDB "${CMAKE_CURRENT_SOURCE_DIR}/sptk5/db/*.h")
INSTALL (FILES ${includeFilesDB} DESTINATION include/sptk5/db)

IF (FLTK_FLAG)
  FILE (GLOB includeFilesGUI "${CMAKE_CURRENT_SOURCE_DIR}/sptk5/gui/*.h")
  INSTALL (FILES ${includeFilesGUI} DESTINATION include/sptk5/gui)
ENDIF (FLTK_FLAG)

FILE (GLOB includeFilesGroup "${CMAKE_CURRENT_SOURCE_DIR}/sptk5/c*")
INSTALL (FILES ${includeFilesGroup} DESTINATION include/sptk5)

IF (POSTGRESQL_FLAG)
  FILE (GLOB pgSQLscripts "${CMAKE_CURRENT_SOURCE_DIR}/dbtools/*.pl")
  INSTALL (PROGRAMS ${pgSQLscripts} DESTINATION bin)
  FILE (GLOB pgSQLscriptConfigs "${CMAKE_CURRENT_SOURCE_DIR}/dbtools/*.conf")
  INSTALL (FILES ${pgSQLscriptConfigs} DESTINATION share/sptk/doc)
ENDIF (POSTGRESQL_FLAG)

# create uninstall configuration file
CONFIGURE_FILE(
  "${PROJECT_SOURCE_DIR}/cmake_uninstall.cmake.in"
#  "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
  "share/sptk/cmake_uninstall.cmake"
  IMMEDIATE @ONLY
)

# create uninstall target
ADD_CUSTOM_TARGET(
  uninstall
  "${CMAKE_COMMAND}" -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
)
